package com.tcs.ebw.ejb.ejbclasses;

import java.rmi.RemoteException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;

import javax.ejb.EJBException;
import javax.ejb.SessionBean;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.sql.DataSource;

import com.tcs.bancs.channels.context.ServiceContext;
import com.tcs.ebw.common.util.EBWLogger;
import com.tcs.ebw.common.util.PropertyFileReader;
import com.tcs.ebw.serverside.factory.EBWServiceFactory;
import com.tcs.ebw.serverside.factory.IEBWService;
import com.tcs.ebw.transferobject.SecurityCheckTO;
import com.tcs.mswitch.common.channel.DBProcedureChannel;

/**
 * <code>GenericSessionBean</code> subclass automatically generated by Workshop.
 *
 * Please flush out the {@link #ejbCreate()} method, add all desired business methods
 * and review the Session, JndiName and FileGeneration annotations to ensure the settings match
 * your intended use.
 */
//@Session(ejbName = "ChannelsEJBBean", type = Session.SessionType.STATELESS, defaultTransaction = Constants.TransactionAttribute.REQUIRED, transactionType = Session.SessionTransactionType.BEAN, allowConcurrentCalls = Constants.Bool.TRUE)
//@JndiName(remote = "ejb.ChannelsEJBBeanRemoteHome")
//@FileGeneration(remoteClass = Constants.Bool.TRUE, remoteHome = Constants.Bool.TRUE, localClass = Constants.Bool.FALSE, localHome = Constants.Bool.FALSE)
public class ChannelsEJBBean implements SessionBean {
	private static final long serialVersionUID = 1L;
	private javax.ejb.SessionContext context;
	private Connection applConnection = null;
    private Connection rtaConnection = null;
	
	
	/**
	 * getSessionContext
	 */
	public javax.ejb.SessionContext getSessionContext() {
		return context;
	}
	/**
	 * setSessionContext
	 */
	public void setSessionContext(final javax.ejb.SessionContext ctx) {
	        context = ctx;
	      /*  try{
	        applConnection = getDS().getConnection();//TODO get conenction here .... using JNDI -- then set autoComit = false and transaction isolation to RC
	        }catch(Exception e ){
	        	e.printStackTrace();
	        }
	        
	        try{
	        	applConnection.setAutoCommit(false);
	        	//applConnection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
			    }catch(SQLException e){
	    		e.printStackTrace();
	    		throw new IllegalArgumentException(e);
	    	}*/
	        rtaConnection = null;//TODO get conenction here .... using JNDI -- then set autoComit = false and transaction isolation to RC
}
	/**
	 * ejbCreate
	 */
		
	public void ejbCreate() {
		// IMPORTANT: Add your code here
	}
	
	public void ejbRemove() throws EJBException, RemoteException {
		
		        try {
		            /*if ( applConnection != null){
		                        applConnection.close();
		            }*/
		            if ( rtaConnection != null){
		                        rtaConnection.close();
		            }
		        } catch (SQLException e) {
		            e.printStackTrace();
		        }

}
	public void ejbActivate() throws EJBException, RemoteException {
		// TODO Auto-generated method stub
		
	}
	public void ejbPassivate() throws EJBException, RemoteException {
		// TODO Auto-generated method stub
		
	}

	// IMPORTANT: Add business methods
	
//	@RemoteMethod
	public Object callService(HashMap map) throws Exception
	{
		//TUHIN REVIEW
		 //UserTransaction userTransaction = context.getUserTransaction();
		 ServiceContext ojbserviceContext = new ServiceContext();
		 Object objOutput =null;
		 
		try
		{
			//TUHIN REVIEW
			 //	userTransaction.begin();

			
			Long ejbstart = System.nanoTime();
			EBWLogger.logDebug(this," Inside the ChannelsEJBBean class callService() method");
		
			Class[] clsParams = (Class[]) map.get("CLASS");
			Object[] objparams = (Object[])map.get("OBJECT");
			String serviceId = map.get("SERVICEID").toString();
			
			//EBWLogger.logDebug(this," class array is "+clsParams);
			//EBWLogger.logDebug(this," object array is "+objparams);
			//EBWLogger.logDebug(this," The service id is "+serviceId);
			//if (applConnection.isClosed()){
				//applConnection = getDS().getConnection();
			//}
				try{
			        applConnection = getDS().getConnection();//TODO get conenction here .... using JNDI -- then set autoComit = false and transaction isolation to RC
			        applConnection.setAutoCommit(false);
			        }catch(Exception e ){
			        	e.printStackTrace();
			        }
			        
			        SecurityCheckTO toObjFromRequest = (SecurityCheckTO)map.get("SECTOOBJ");
					// code added by Dinesh on 25-Jan-10 for UUID security check for access to business calls		
					
						SecurityCheckTO toObjFromDB =new SecurityCheckTO();
						IEBWService serviceID = EBWServiceFactory.create("uuidCompare");
						serviceID.setConnection(applConnection);
						Class[] clspara = {Object.class,Boolean.class};
						Object[] objpara = {toObjFromRequest,new Boolean(false)};
						objOutput = serviceID.execute(clspara, objpara);
						toObjFromDB=(SecurityCheckTO)objOutput;
						if(toObjFromRequest.getUuid().trim().equalsIgnoreCase(toObjFromDB.getUuid().trim()))
						{
			        
					
							IEBWService serv = EBWServiceFactory.create(serviceId);
							serv.setConnection(applConnection);
							
							//EBWLogger.logDebug(this,"The service factory object is "+serv);		
							objOutput = serv.execute(clsParams, objparams);
			
						}
						else
						{
							throw new EJBException("UUID Comparison failed...");
						}
						//ends here 	
			
			if(objOutput instanceof ArrayList)
			{
			   ArrayList serviceReturnOut = (ArrayList)objOutput;
			   if(serviceReturnOut!= null && !serviceReturnOut.isEmpty())
			   { 
			     if(serviceReturnOut.get(0)!=null && serviceReturnOut.get(0) instanceof ServiceContext){
			         ojbserviceContext = (ServiceContext)serviceReturnOut.get(0);
			      }
			   }
			}
			//EBWLogger.logDebug(this,"User Transaction* commit is successfull::"+ojbserviceContext.isServiceCallSuccessful());
			//EBWLogger.logDebug(this,"User Transaction* RTA commit is successfull::"+ojbserviceContext.isRTACommitReq());
			if(ojbserviceContext.isServiceCallSuccessful())
			{			                                    
				//TUHIN REVIEW
				applConnection.commit();
				 //userTransaction.commit();
	            //EBWLogger.logDebug(this,"User Transaction* commit is successfull...");
	            if(ojbserviceContext.isRTACommitReq()){
	            	int rta_commit = DBProcedureChannel.commit(); // commit RTA
	            	//EBWLogger.logDebug(this,"User Transaction* RTA commit() is successfull::");
	            	System.out.println("ChannelsEJBBean::RTA Commit Return Code :"+rta_commit+" for Thread : "+Thread.currentThread().getName());
	            }/*else{
	            	userTransaction.rollback();    
		                if(ojbserviceContext.isRTACommitReq()){
		                DBProcedureChannel.rollback(); // rollback RTA
		                }
	            }*/
			}else {
				//TUHIN REVIEW
				//userTransaction.rollback();
				applConnection.rollback();
				
				if(ojbserviceContext.isRTARollbackReq()){
					int rta_rollback = DBProcedureChannel.rollback();
					//EBWLogger.logDebug(this,"User Transaction* RTA rollback() is successfull::");
	            	System.out.println("ChannelsEJBBean::RTA Rollback Return Code :"+rta_rollback+" for Thread : "+Thread.currentThread().getName());
				}
				
				//EBWLogger.logDebug(this,"User Transaction* rollback is successfull...");
			}
			Long ejbend = System.nanoTime();			
			System.out.println("ServiceId="+serviceId+"::Thread Name="+Thread.currentThread().getName()+"::ejb call in nano's..."+(ejbend-ejbstart)/1000000);

		}
		catch(Exception ex)
		{
			//EBWLogger.logDebug(this,"Caught an exception into ejb class and all transactions will be rolled back ");
			
			try {				
//				TUHIN REVIEW
				//userTransaction.rollback();//Banks
				applConnection.rollback();		
				if(ojbserviceContext.isRTARollbackReq()){
					int rta_rollback1 = DBProcedureChannel.rollback();//RTA
					System.out.println("RTA_Rollback1::RTA Commit Return Code :"+rta_rollback1);
				}			
		       } catch (Exception syex) {
		           throw new EJBException
		              ("Rollback failed: " + syex.getMessage());
		       }
		       throw new EJBException 
		          ("Transaction failed: " + ex.getMessage());
			
			/*
			catch(Throwable t)
			{
				//EBWLogger.logDebug(this,"Caught an exception into ejb class and all transactions will be rolled back "+t);
				userTransaction.rollback();
				//context.setRollbackOnly();
			}
			*/			
		}finally{
			if ( applConnection != null){
                applConnection.close();
			}	
		}
		return objOutput;
	
	}
	
	private DataSource getDS() {
		String DSName=null;
 	   DataSource ds = null;
         try {
        	DSName = PropertyFileReader.getProperty("datasource_name");
         	System.out.println("Into getDS()...");
             Hashtable parms = new Hashtable();
             parms.put(Context.INITIAL_CONTEXT_FACTORY,"com.ibm.websphere.naming.WsnInitialContextFactory");
             InitialContext ctx = new InitialContext(parms);
            // ut = (UserTransaction) ctx.lookup("java:comp/UserTransaction");            
             // Perform a naming service lookup to get the DataSource object.
             ds = (DataSource)ctx.lookup(DSName);
             System.out.println("DataSource creation success...");
         } catch (Exception e) {
             System.out.println("Naming service exception: " + e.getMessage());
             e.printStackTrace();
         }
         return ds;  
     }
	
}